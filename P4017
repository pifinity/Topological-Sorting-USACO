import java.io.*;
import java.util.*;

public class MaxFoodChain {



    static int N, M;
    static int[] inDegree;
    static ArrayList<Integer>[] graph;
    static int[] outDegree;
    static int[] lengths;
    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(bf.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        inDegree = new int[N+1];
        outDegree = new int[N+1];
        lengths = new int[N+1];


        graph = new ArrayList[N+1];

        for (int i=0; i<=N; i++){
            graph[i] = new ArrayList<>();
        }

        for (int i=0; i<M; i++){
            st = new StringTokenizer(bf.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            graph[a].add(b);
            inDegree[b]++;
            outDegree[a]++;
        }



        Queue<Integer> q = new LinkedList<>();
        
        for (int i=1; i<=N; i++){
            if (inDegree[i]==0){
                q.offer(i);
                lengths[i] = 1;
            }
        }
        //  System.out.println(Arrays.toString(inDegree));


        int solution =0;
        while (q.size()>0){
            int cur = q.poll();

            for (int i : graph[cur]){
                lengths[i] += lengths[cur];
                lengths[i]%=80112002;
                inDegree[i]--;
                if (inDegree[i]==0){
                    if (outDegree[i]==0){
                        solution+=lengths[i]%80112002;
                        continue;
                    }
                    q.offer(i);
                }
            }
        }




        System.out.println(solution);





    }
}
