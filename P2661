import java.io.*;
import java.util.*;
class InformationTransmission {
    static int[] next;
    static int[] inDegree;
    static boolean[] visited;
    static int length;

    static void bfs(int input){

        Queue<Integer> q = new ArrayDeque<Integer>();
        q.offer(input);
        visited[input] = true;

        while (q.size()>0){
            int cur = q.poll();
            int v = next[cur];

            if (v==input) return;

            if (!visited[v]){
                length++;
                visited[v] = true;
                q.offer(v);
            }
        }



    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());
        next = new int[n+1];
        inDegree = new int[n+1];
        visited= new boolean[n+1];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for(int i = 1; i <= n; i++) {
            next[i] = Integer.parseInt(st.nextToken());
            inDegree[next[i]]++;
        }

        Queue<Integer> q = new ArrayDeque<Integer>();
        for(int i = 1; i <= n; i++) {
            //todo
            if (inDegree[i]==0){

                q.offer(i);
                visited[i] = true;
            }
        }

    //    System.out.println(Arrays.toString(inDegree));
    //    System.out.println(Arrays.toString(next));
        while(q.size()>0) {
            int cur = q.poll();
            int v = next[cur];
            inDegree[v]--;
            if (inDegree[v]==0){
                visited[v] = true;
                q.offer(v);
            }

        }
     //   System.out.println(Arrays.toString(visited));

        int ret = Integer.MAX_VALUE;
        for (int i=1; i<=n; i++){

            if (!visited[i]) {
                length = 1;
                bfs(i);
                ret = Math.min(ret, length);
              //  System.out.println(i+length);
            }

        }

        System.out.println(ret);


    }
}
